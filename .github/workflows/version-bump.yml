name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: "Create release after version bump"
        required: true
        default: true
        type: boolean

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' custom_components/scene_extrapolation/manifest.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}
          VERSION_TYPE=${{ github.event.inputs.version_type }}

          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case $VERSION_TYPE in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update manifest version
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          jq --arg version "$NEW_VERSION" '.version = $version' custom_components/scene_extrapolation/manifest.json > temp.json
          mv temp.json custom_components/scene_extrapolation/manifest.json
          echo "Updated manifest.json to version $NEW_VERSION"

      - name: Update CHANGELOG
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          CURRENT_VERSION=${{ steps.current_version.outputs.current_version }}

          # Create a temporary changelog entry
          TEMP_CHANGELOG=$(mktemp)
          echo "## [$NEW_VERSION] - $(date +%Y-%m-%d)" >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Added" >> $TEMP_CHANGELOG
          echo "- " >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Changed" >> $TEMP_CHANGELOG
          echo "- " >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG
          echo "### Fixed" >> $TEMP_CHANGELOG
          echo "- " >> $TEMP_CHANGELOG
          echo "" >> $TEMP_CHANGELOG

          # Prepend to existing CHANGELOG
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> $TEMP_CHANGELOG
          fi
          mv $TEMP_CHANGELOG CHANGELOG.md

          echo "Updated CHANGELOG.md with version $NEW_VERSION"

      - name: Commit and push changes
        run: |
          git add custom_components/scene_extrapolation/manifest.json CHANGELOG.md
          git commit -m "Bump version to ${{ steps.new_version.outputs.new_version }}"
          git push

      - name: Create and push tag
        if: ${{ github.event.inputs.create_release == 'true' }}
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin "v$NEW_VERSION"
          echo "Created and pushed tag v$NEW_VERSION"
